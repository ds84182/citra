use std::ops::Neg;
use num_traits::ToPrimitive;

#[derive(Primitive, Debug, PartialEq)]
pub enum ErrorCode {
    Success = 0,
    TooBig = 1,
    Access = 2,
    AddressInUse = 3,
    AddressNotAvailable = 4,
    AFNotSupported = 5,
    WouldBlock = 6,
    Already = 7,
    BadFD = 8,
    BadMessage = 9,
    Busy = 10,
    Canceled = 11,
    Child = 12,
    ConnectionAborted = 13,
    ConnectionRefused = 14,
    ConnectionReset = 15,
    Deadlock = 16,
    DestinationAddressRequired = 17,
    Domain = 18,
    DiskQuota = 19,
    Exists = 20,
    Fault = 21,
    FileTooBig = 22,
    HostUnreachable = 23,
    IdentifierRemoved = 24,
    IllegalSequence = 25,
    InProgress = 26,
    Interrupted = 27,
    Invalid = 28,
    InputOutput = 29,
    IsConnected = 30,
    IsDirectory = 31,
    Loop = 32,
    TooManyOpenFiles = 33,
    TooManyLinks = 34,
    MessageSize = 35,
    MultiHop = 36,
    NameTooLong = 37,
    NetDown = 38,
    NetReset = 39,
    NetUnreachable = 40,
    NoFileDescriptorAvailable = 41,
    NoBufferSpace = 42,
    NoDataAvailable = 43,
    NoDevice = 44,
    NoEntry = 45,
    NoExecute = 46,
    NoLock = 47,
    NoLink = 48,
    NoMemory = 49,
    NoMessage = 50,
    ProtocolNotAvailable = 51,
    NoSpace = 52,
    NoStreamResources = 53,
    NotAStream = 54,
    NotImplemented = 55,
    NotConnected = 56,
    NotADirectory = 57,
    NotEmpty = 58,
    NotASocket = 59,
    NotSupported = 60,
    NoTTY = 61,
    NoSuchDevice = 62,
    OperationNotSupported = 63,
    Overflow = 64,
    NotPermitted = 65,
    BrokenPipe = 66,
    ProtocolError = 67,
    ProtocolNotSupported = 68,
    ProtocolType = 69,
    Range = 70,
    ReadOnlyFileSystem = 71,
    IllegalSeek = 72,
    NoSuchProcess = 73,
    Stale = 74,
    TimerExpired = 75,
    TimedOut = 76,
}

impl Neg for ErrorCode {
    type Output = i32;

    fn neg(self) -> i32 {
        -self.to_i32().expect("Failed to convert error code into i32")
    }
}
